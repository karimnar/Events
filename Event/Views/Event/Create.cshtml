@model Model.Event

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Create</title>
    <link href="~/Content/style1.css" rel="stylesheet" />

    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-3.3.1.min.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $('#universities').on('change', function () {

                var idUniv = $('#universities option:selected').val();
                $.ajax({
                    type: 'GET',
                    data: { idUniv: idUniv },
                    url: '@Url.Action("loadorg","Event")',
                    success: function (result) {
                      //  var organizations = JSON.parse(result);
                        var s = '<option value="-1">select organization</option>';
                        for (var i = 0; i < result.length; i++) {
                            s += '<option value="' + result[i].Id + '">' + result[i].Name + '</option>'
                        } $('#organizations').html(s);

                    }
                });
            });
        });

    </script>




    <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDTdPHr3hiUFuT5PYqPyD7ceBbvERs9I28&callback=initMap&libraries=places" type="text/javascript"></script>
    
    <script type="text/javascript">
        function initMap() {
            var location = document.getElementById('location');
            var options = {
                types: ['(cities)'],
                componentRestrictions: { country: "tn" }
            };
            var autocomplete = new google.maps.places.Autocomplete(location, options);

            autocomplete.addListener('place_changed', function () {
                var place = autocomplete.getPlace();
                document.getElementById('location-snap').innerHTML = place.formatted_address;
               
            });
        }
    </script>


</head>
<body >
    <div class="container">
        @using (Html.BeginForm("Create", "Event", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

             <div class="row add-annonces" style="margin-top: 40px;">
            <div class="col-lg-12 col-md-12 "><h4 class="rubrique-title">Déposer votre annonce gratuitement</h4></div>

            <div class="col-lg-4 col-md-4 mb-5 ml-5 mr-5 mt-5">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })





                <div class="form-group">
                    <label for="exampleInputEmail1">Titre de l’annonce <span class="couleur-rouge">*</span></label>

                    @Html.EditorFor(model => model.EventTitle, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EventTitle, "", new { @class = "text-danger" })
                    
                </div>







                <div class="form-group">
                    <label for="exampleInputPassword1">Sélectionnez une date <span class="couleur-rouge">*</span></label>

                    @Html.TextBoxFor(model => model.EventDate, new { @class = "form-control datepicker", @type = "date" })
                    @Html.ValidationMessageFor(model => model.EventDate, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    <label for="exampleInputPassword1">Adresse <span class="couleur-rouge">*</span></label>

                    @Html.EditorFor(model => model.EventLocation, new { htmlAttributes = new { @class = "form-control", id = "location" } })
                    @Html.ValidationMessageFor(model => model.EventLocation, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    <label for="file">Importer l'image de l'annonce <span class="couleur-rouge">*</span></label>
                    <input multiple type="file" name="files" value="Browse" class="file" id="file">
                </div>

            </div>



            <div class="col-lg-4 col-md-4 mb-5 ml-5 mr-5 mt-5">


                <div class="form-group">
                    <label for="exampleInputEmail1">Séléctionnez une université <span class="couleur-rouge">*</span></label>

                    <select id="universities">
                        <option value="-1">select university</option>
                        @foreach (var university in ViewBag.listuniv)
                        {
                            <option value="@university.idUniv">@university.UnivName</option>

                        }

                    </select>

                    @Html.ValidationMessageFor(model => model.hostedby, "", new { @class = "text-danger" })
                </div>



                <div class="form-group">
                    <label for="exampleInputEmail1">Sélectionnez une institut <span class="couleur-rouge">*</span></label>

                        <select name="hostedby" id="organizations"></select>  
                </div>



                <div class="form-group">
                    <label for="exampleInputPassword1">Catégorie <span class="couleur-rouge">*</span></label>
                    

                        <select name="theme" id="themes" class="form-control">
                            <option value="-1">--Séléctionnez un théme--</option>
                            @foreach (var theme in ViewBag.themelist)
                            {
                                <option value="@theme.idTheme">@theme.designation</option>

                            }

                        </select>

                        @Html.ValidationMessageFor(model => model.theme, "", new { @class = "text-danger" })
                    
                </div>



                <div class="form-group">
                    <label for="exampleInputPassword1">Description <span class="couleur-rouge">*</span></label>
                   
                        @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                  
                </div>


                

                <center><button class="btn-valide" type="submit">Valider</button></center>
            </div>


             </div>
                   
                    
             }
    </div>

</body>

</html>
